From 0a093d34ebcc850a6c4e0c396823ebe1b7a8609f Mon Sep 17 00:00:00 2001
From: Jacksing <>
Date: Sun, 13 Feb 2022 01:36:46 +0800
Subject: [PATCH 1/2] =?UTF-8?q?feat:=20=E5=AE=8C=E6=88=90trace=E7=B3=BB?=
 =?UTF-8?q?=E7=BB=9F=E8=B0=83=E7=94=A8?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 Makefile         |  8 ++++----
 kernel/proc.c    | 19 +++++++++++--------
 kernel/proc.h    |  1 +
 kernel/syscall.c | 39 +++++++++++++++++++++++++++++++++++++++
 kernel/syscall.h |  1 +
 kernel/sysproc.c | 18 ++++++++++++++++++
 user/user.h      |  1 +
 user/usys.pl     |  3 ++-
 8 files changed, 77 insertions(+), 13 deletions(-)

diff --git a/Makefile b/Makefile
index f0beb51..84f3d1c 100644
--- a/Makefile
+++ b/Makefile
@@ -43,7 +43,7 @@ endif

 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
-#TOOLPREFIX =
+#TOOLPREFIX =

 # Try to infer the correct TOOLPREFIX if not set
 ifndef TOOLPREFIX
@@ -91,7 +91,7 @@ endif
 LDFLAGS = -z max-page-size=4096

 $K/kernel: $(OBJS) $K/kernel.ld $U/initcode
-	$(LD) $(LDFLAGS) -T $K/kernel.ld -o $K/kernel $(OBJS)
+	$(LD) $(LDFLAGS) -T $K/kernel.ld -o $K/kernel $(OBJS)
 	$(OBJDUMP) -S $K/kernel > $K/kernel.asm
 	$(OBJDUMP) -t $K/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $K/kernel.sym

@@ -149,7 +149,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\


 ifeq ($(LAB),trap)
@@ -178,7 +178,7 @@ fs.img: mkfs/mkfs README $(UEXTRA) $(UPROGS)

 -include kernel/*.d user/*.d

-clean:
+clean:
 	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
 	*/*.o */*.d */*.asm */*.sym \
 	$U/initcode $U/initcode.out $K/kernel fs.img \
diff --git a/kernel/proc.c b/kernel/proc.c
index 6afafa1..53e516e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -26,7 +26,7 @@ void
 procinit(void)
 {
   struct proc *p;
-
+
   initlock(&pid_lock, "nextpid");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
@@ -76,7 +76,7 @@ myproc(void) {
 int
 allocpid() {
   int pid;
-
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -215,7 +215,7 @@ userinit(void)

   p = allocproc();
   initproc = p;
-
+
   // allocate one user page and copy init's instructions
   // and data into it.
   uvminit(p->pagetable, initcode, sizeof(initcode));
@@ -283,6 +283,9 @@ fork(void)
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;

+  // copy trace info
+  np->syscall_mask = p->syscall_mask;
+
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
     if(p->ofile[i])
@@ -369,7 +372,7 @@ exit(int status)
   acquire(&p->lock);
   struct proc *original_parent = p->parent;
   release(&p->lock);
-
+
   // we need the parent's lock in order to wake it up from wait().
   // the parent-then-child rule says we have to lock it first.
   acquire(&original_parent->lock);
@@ -440,7 +443,7 @@ wait(uint64 addr)
       release(&p->lock);
       return -1;
     }
-
+
     // Wait for a child to exit.
     sleep(p, &p->lock);  //DOC: wait-sleep
   }
@@ -458,12 +461,12 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-
+
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
-
+
     int found = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
@@ -555,7 +558,7 @@ void
 sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..8b5f92f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int syscall_mask;            // remember trace info
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..fa51e39 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);

 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,8 +128,43 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
 };

+static char *syscallName[] = {
+    "",
+    "fork",
+    "exit",
+    "wait",
+    "pipe",
+    "read",
+    "kill",
+    "exec",
+    "fstat",
+    "chdir",
+    "dup",
+    "getpid",
+    "sbrk",
+    "sleep",
+    "uptime",
+    "open",
+    "write",
+    "mknod",
+    "unlink",
+    "link",
+    "mkdir",
+    "close",
+    "trace"
+};
+
+void showSysCallInfo(struct proc *p, int sys_num)
+{
+  if (sys_num <= 0)
+    return;
+  if (sys_num < NELEM(syscallName))
+    printf("%d: syscall %s -> %d\n", p->pid, syscallName[sys_num], p->trapframe->a0);
+}
+
 void
 syscall(void)
 {
@@ -138,6 +174,9 @@ syscall(void)
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     p->trapframe->a0 = syscalls[num]();
+    if (p->syscall_mask & 1 << num) {
+      showSysCallInfo(p, num);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..fc22b30 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..b932536 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -95,3 +95,21 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int mask;
+  if (argint(0, &mask) < 0)
+  {
+    return -1;
+  }
+
+  if (mask > 2147483647 || mask < 0)
+    return -1;
+
+  acquire(&tickslock);
+  myproc()->syscall_mask = mask;
+  release(&tickslock);
+  return 0;
+}
diff --git a/user/user.h b/user/user.h
index b71ecda..fdeeefc 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);

 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..48ecbff 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -14,7 +14,7 @@ sub entry {
     print " ecall\n";
     print " ret\n";
 }
-
+
 entry("fork");
 entry("exit");
 entry("wait");
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
\ No newline at end of file
--
2.25.1

